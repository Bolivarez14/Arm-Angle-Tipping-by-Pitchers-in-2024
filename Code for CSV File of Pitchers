#CODE FOR CSV FILE WITH ALL PITCHERS AVERAGE ARM ANGLE DIFFERENCES

import pybaseball as bb
import pandas as pd
from datetime import datetime, timedelta

def fetch_statcast_in_chunks(start_dt: str, end_dt: str, chunk_days: int = 30) -> pd.DataFrame:
    fmt = "%Y-%m-%d"
    start = datetime.strptime(start_dt, fmt)
    end   = datetime.strptime(end_dt, fmt)
    delta = timedelta(days=chunk_days)

    chunks = []
    current = start
    while current <= end:
        chunk_end = min(current + delta, end)
        try:
            part = bb.statcast(
                start_dt=current.strftime(fmt),
                end_dt=chunk_end.strftime(fmt)
            )
            chunks.append(part)
        except pd.errors.ParserError:
            pass
        current = chunk_end + timedelta(days=1)

    return pd.concat(chunks, ignore_index=True) if chunks else pd.DataFrame()

def summarize_arm_angle_to_csv(start_dt: str, end_dt: str, out_csv: str = "arm_angle_summary.csv") -> None:
    # 1. Fetch & clean
    data = fetch_statcast_in_chunks(start_dt, end_dt)
    data = data.dropna(subset=['arm_angle'])

    # 2. Compute per‐pitcher summaries
    records = []
    for pid in data['pitcher'].unique():
        player = bb.playerid_reverse_lookup([pid], key_type='mlbam')
        if player.empty:
            continue
        name = f"{player.iloc[0]['name_first'].upper()} {player.iloc[0]['name_last'].upper()}"

        df_pid = data[data['pitcher'] == pid]
        counts = df_pid['pitch_name'].value_counts()
        total  = counts.sum()
        valid  = counts[counts >= 0.10 * total].index
        df_filt = df_pid[df_pid['pitch_name'].isin(valid)]
        mean_arm = df_filt.groupby('pitch_name')['arm_angle'].mean()
        if mean_arm.empty:
            continue

        # highest / lowest mean arm angles
        hi_pitch, hi_val = mean_arm.idxmax(), mean_arm.max()
        lo_pitch, lo_val = mean_arm.idxmin(), mean_arm.min()
        diff = round(hi_val - lo_val, 2)

        # counts for those two pitch types
        hi_count = counts.get(hi_pitch, 0)
        lo_count = counts.get(lo_pitch, 0)

        # add to our summary
        records.append({
            'Player Name':       name,
            'Player ID':         pid,
            'Highest Pitch':     hi_pitch,
            'Highest Angle':     round(hi_val, 2),
            'Highest Pitch #':   hi_count,
            'Lowest Pitch':      lo_pitch,
            'Lowest Angle':      round(lo_val, 2),
            'Lowest Pitch #':    lo_count,
            'Difference':        diff
        })

        # print to console
        print(f"\nPlayer Name:           {name}")
        print(f"Player ID:             {pid}")
        print(f"Highest Mean Angle →  {hi_pitch}: {hi_val:.2f}° (Count: {hi_count})")
        print(f"Lowest  Mean Angle →  {lo_pitch}: {lo_val:.2f}° (Count: {lo_count})")
        print(f"Difference             → {diff:.2f}°")

    # 3. Write out and confirm
    df_summary = pd.DataFrame(records)
    df_summary.to_csv(out_csv, index=False)
    print(f"\nFull summary written to {out_csv}")

if __name__ == "__main__":
    summarize_arm_angle_to_csv(start_dt='2024-03-01', end_dt='2024-11-01')
